(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{473:function(v,_,t){"use strict";t.r(_);var e=t(1),a=Object(e.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"web-api-项目开发规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#web-api-项目开发规范"}},[v._v("#")]),v._v(" Web API 项目开发规范")]),v._v(" "),t("p",[v._v("正所谓：不以规矩，不能成方圆。在使用 Laravel 开发 Web API 之前，我们需要了解 Web API 的相关概念与规范，除此之外，我们还需要去了解业界是如何实现 Web API 的，要把业界案例作为参考，从而制定符合公司技术的 Web API 规范。")]),v._v(" "),t("h2",{attrs:{id:"web-api-的设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#web-api-的设计"}},[v._v("#")]),v._v(" Web API 的设计")]),v._v(" "),t("h3",{attrs:{id:"什么是-web-api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-web-api"}},[v._v("#")]),v._v(" 什么是 Web API")]),v._v(" "),t("p",[v._v("本文中的 Web API 是指「使用 HTTP 协议通过网络调用的 API」，简而言之，Web API 就是一个 Web 系统，通过访问 URI 可以与服务器完成信息交互，或者获得存放在服务器的数据信息等，这样调用者通过程序进行访问后即可机械地使用这些数据。")]),v._v(" "),t("h3",{attrs:{id:"设计优美的-web-api-的重要性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设计优美的-web-api-的重要性"}},[v._v("#")]),v._v(" 设计优美的 Web API 的重要性")]),v._v(" "),t("ul",[t("li",[v._v("设计优美的 Web API 易于使用\n"),t("ul",[t("li",[v._v("提升开发效率")]),v._v(" "),t("li",[v._v("减少开发周期")])])]),v._v(" "),t("li",[v._v("设计优美的 Web API 便于更改\n"),t("ul",[t("li",[v._v("避免更改之后无法使用")]),v._v(" "),t("li",[v._v("尽量不影响正在使用的用户")])])]),v._v(" "),t("li",[v._v("设计优美的 Web API 健壮性好\n"),t("ul",[t("li",[v._v("安全可靠，难以破解")]),v._v(" "),t("li",[v._v("考虑 API 特有安全问题")])])]),v._v(" "),t("li",[v._v("设计优美的 Web API 不怕公之于众\n"),t("ul",[t("li",[v._v("不怕受到质疑")]),v._v(" "),t("li",[v._v("拥有技术影响")])])])]),v._v(" "),t("h3",{attrs:{id:"如何设计优美的-web-api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何设计优美的-web-api"}},[v._v("#")]),v._v(" 如何设计优美的 Web API")]),v._v(" "),t("ol",[t("li",[v._v("首先需要决定的是将什么样的信息，通过 API 公开。")]),v._v(" "),t("li",[v._v("其次考虑作为访问目标的端点。")]),v._v(" "),t("li",[v._v("然后考虑交互方式与合适的响应数据格式。")]),v._v(" "),t("li",[v._v("最后还需要考虑安全性以及访问控制等相关内容。")])]),v._v(" "),t("p",[v._v("两个重要的设计原则，如下所示：")]),v._v(" "),t("ul",[t("li",[v._v("设计规范明确的内容必须遵守相关规范。")]),v._v(" "),t("li",[v._v("没有设计规范的内容必须遵守相关事实标准。")])]),v._v(" "),t("h2",{attrs:{id:"web-api-端点与请求的设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#web-api-端点与请求的设计"}},[v._v("#")]),v._v(" Web API 端点与请求的设计")]),v._v(" "),t("p",[v._v("本文中的端点是指用于访问 API 的 URI。一般而言，因为 API 将各种不同的功能进行了封装，所以会拥有多个不同的端点。")]),v._v(" "),t("blockquote",[t("p",[v._v("URI：统一资源标志符，一个用于标识某一互联网资源名称的字符串")])]),v._v(" "),t("h3",{attrs:{id:"web-api-端点基本原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#web-api-端点基本原则"}},[v._v("#")]),v._v(" Web API 端点基本原则")]),v._v(" "),t("p",[v._v("优秀的 URI 设计，有一个非常重要的原则：容易记忆，URI 包含的功能一目了然。可以把这一条原则细化成多个小原则，如下所示：")]),v._v(" "),t("ul",[t("li",[v._v("短小便于输入的 URI\n"),t("ul",[t("li",[v._v("http://api.example.com/service/api/search")]),v._v(" "),t("li",[v._v("http://api.example.com/serach √")])])]),v._v(" "),t("li",[v._v("人可以秒懂的 URI\n"),t("ul",[t("li",[v._v("http://api.example.com/sv/u/")]),v._v(" "),t("li",[v._v("http://api.example.com/seihin/1")]),v._v(" "),t("li",[v._v("http://api.example.com/productos/1")]),v._v(" "),t("li",[v._v("http://api.example.com/products/1 √")])])]),v._v(" "),t("li",[v._v("没有大小写混用的 URI\n"),t("ul",[t("li",[v._v("http://api.example.com/Users/1")]),v._v(" "),t("li",[v._v("http://api.example.com/API/getUserName")]),v._v(" "),t("li",[v._v("http://api.example.com/USERS/1")]),v._v(" "),t("li",[v._v("http://api.example.com/users/1 √")])])]),v._v(" "),t("li",[v._v("修改方便的 URI\n"),t("ul",[t("li",[v._v("http://api.example.com/v1/items/alpha/1")]),v._v(" "),t("li",[v._v("http://api.example.com/v1/items/1 √")])])]),v._v(" "),t("li",[v._v("不会暴露服务器架构的 URI\n"),t("ul",[t("li",[v._v("http://api.example.com/cgi-bin/get_user.php?user=100")]),v._v(" "),t("li",[v._v("http://api.example.com/v1/users/100 √")])])]),v._v(" "),t("li",[v._v("规则统一的 URI\n"),t("ul",[t("li",[v._v("不统一的 URI\n"),t("ul",[t("li",[v._v("获取好友信息：http://api.example.com/friends?id=100")]),v._v(" "),t("li",[v._v("发送消息：http://api.example.com/friend/100/message")])])]),v._v(" "),t("li",[v._v("统一的 URI\n"),t("ul",[t("li",[v._v("获取好友信息：http://api.example.com/friends/100 √")]),v._v(" "),t("li",[v._v("发送消息：http://api.example.com/friends/100/messages √")])])])])])]),v._v(" "),t("h3",{attrs:{id:"http-方法和-api-端点是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http-方法和-api-端点是什么"}},[v._v("#")]),v._v(" HTTP 方法和 API 端点是什么")]),v._v(" "),t("p",[v._v("HTTP 方法是进行 HTTP 访问时指定的操作，URI 和 HTTP 方法之间的关系可以认为操作对象和操作方法的关系。\n如果把 URI 当作 API 的「操作对象 = 资源」，那么 HTTP 方法则表示「进行怎样的操作」。通过用不同的方法访问一个端点，不但可以获取信息，还能修改信息，删除信息。")]),v._v(" "),t("p",[v._v("HTTP 常用方法如下：")]),v._v(" "),t("ul",[t("li",[v._v("GET：获取信息")]),v._v(" "),t("li",[v._v("POST：创建信息")]),v._v(" "),t("li",[v._v("PUT：更新覆盖信息")]),v._v(" "),t("li",[v._v("PATCH：更新部分信息")]),v._v(" "),t("li",[v._v("DELETE：删除信息")])]),v._v(" "),t("p",[v._v("HTML 文档 Form 元素仅仅支持 GET 和 POST 方法，想要用其他 HTTP 方法，实现方式有两种，都是基于 POST 方法进行实现：")]),v._v(" "),t("ul",[t("li",[v._v("通过 _method 参数来实现")]),v._v(" "),t("li",[v._v("通过 X-HTTP-Method-Override HTTP Header 实现")])]),v._v(" "),t("h3",{attrs:{id:"http-方法和-api-端点的设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http-方法和-api-端点的设计"}},[v._v("#")]),v._v(" HTTP 方法和 API 端点的设计")]),v._v(" "),t("p",[v._v("目前成型的 API 设计模式如下：")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("功能")]),v._v(" "),t("th",[v._v("HTTP Method")]),v._v(" "),t("th",[v._v("URI")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("获取用户列表")]),v._v(" "),t("td",[v._v("GET")]),v._v(" "),t("td",[v._v("http://api.example.com/v1/users")])]),v._v(" "),t("tr",[t("td",[v._v("用户注册")]),v._v(" "),t("td",[v._v("POST")]),v._v(" "),t("td",[v._v("http://api.example.com/v1/users")])]),v._v(" "),t("tr",[t("td",[v._v("获取特定用户")]),v._v(" "),t("td",[v._v("GET")]),v._v(" "),t("td",[v._v("http://api.example.com/v1/users/:id")])]),v._v(" "),t("tr",[t("td",[v._v("更新用户信息")]),v._v(" "),t("td",[v._v("PUT、PATCH")]),v._v(" "),t("td",[v._v("http://api.example.com/v1/users/:id")])]),v._v(" "),t("tr",[t("td",[v._v("删除用户信息")]),v._v(" "),t("td",[v._v("DELETE")]),v._v(" "),t("td",[v._v("http://api.example.com/v1/users/:id")])]),v._v(" "),t("tr",[t("td",[v._v("获取当前用户的好友列表")]),v._v(" "),t("td",[v._v("GET")]),v._v(" "),t("td",[v._v("http://api.example.com/v1/users/:id/friends")])]),v._v(" "),t("tr",[t("td",[v._v("添加好友")]),v._v(" "),t("td",[v._v("POST")]),v._v(" "),t("td",[v._v("http://api.example.com/v1/users/:id/friends")])]),v._v(" "),t("tr",[t("td",[v._v("删除好友")]),v._v(" "),t("td",[v._v("DELETE")]),v._v(" "),t("td",[v._v("http://api.example.com/v1/users/:id/friends/:id")])]),v._v(" "),t("tr",[t("td",[v._v("获取指定用户动态")]),v._v(" "),t("td",[v._v("GET")]),v._v(" "),t("td",[v._v("http://api.example.com/v1/users/:id/updates")])]),v._v(" "),t("tr",[t("td",[v._v("获取好友的动态")]),v._v(" "),t("td",[v._v("GET")]),v._v(" "),t("td",[v._v("http://api.example.com/v1/users/:id/friends/:id/updates")])])])]),v._v(" "),t("p",[t("strong",[v._v("获取单个数据")])]),v._v(" "),t("p",[v._v("规范： "),t("code",[v._v("GET http://api.example.com/v1/users/:id")]),v._v(" ，各大公司的实现方式如下所示：")]),v._v(" "),t("ul",[t("li",[v._v("Twitter：/statuses/retweets/123456.json")]),v._v(" "),t("li",[v._v("LinkedIn：/companies/123456")]),v._v(" "),t("li",[v._v("Foursquare：/venues/123456")])]),v._v(" "),t("p",[t("strong",[v._v("获取数据集合")])]),v._v(" "),t("p",[v._v("规范： "),t("code",[v._v("GET http://api.example.com/v1/users")]),v._v(" ，各大公司的实现方式如下所示：")]),v._v(" "),t("ul",[t("li",[v._v("Twitter：/statuses/mentions_timeline.json")]),v._v(" "),t("li",[v._v("YouTube：/activities")]),v._v(" "),t("li",[v._v("LinkedIn：/companies")]),v._v(" "),t("li",[v._v("Foursquare：/venuegroups/list")]),v._v(" "),t("li",[v._v("Disqus：/blacklists/list.json")])]),v._v(" "),t("p",[t("strong",[v._v("自身信息的别名")])]),v._v(" "),t("p",[v._v("规范： "),t("code",[v._v("me")]),v._v(" ，各大公司的实现方式如下所示：")]),v._v(" "),t("ul",[t("li",[v._v("Instagram：/users/self/media/liked")]),v._v(" "),t("li",[v._v("Etsy：/users/__SELF__/favorites/listings/12345?method=DELETE")]),v._v(" "),t("li",[v._v("LikedIn：/people/~")]),v._v(" "),t("li",[v._v("Reddit：/me")]),v._v(" "),t("li",[v._v("Tumblr：/user/info")]),v._v(" "),t("li",[v._v("Google Calendar：/users/me/calendarList")]),v._v(" "),t("li",[v._v("Xing：/users/me")])]),v._v(" "),t("p",[v._v("通过这样设计端点，开发时需要输出哪个用户的信息就必须从认证信息中获取，这就必然会导致自身信息的处理和获取其他用户信息的处理要分开进行。可以更容易地防止误将其他用户的个人信息对外公开的 BUG 发生。")]),v._v(" "),t("h3",{attrs:{id:"http-api-端点设计注意事项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http-api-端点设计注意事项"}},[v._v("#")]),v._v(" HTTP API 端点设计注意事项")]),v._v(" "),t("ul",[t("li",[v._v("使用名词的复数形式\n"),t("ul",[t("li",[v._v("复数形式表示资源的集合")]),v._v(" "),t("li",[v._v("复数形式与数据库表名一致更加恰当")]),v._v(" "),t("li",[v._v("复数形式表示名词等于资源，HTTP 方法表示动词等于操作，这相当于用最简洁的方式描述对资源进行那些操作")])])]),v._v(" "),t("li",[v._v("注意所用的单词\n"),t("ul",[t("li",[v._v("所选用的单词要符合 API 的语义性")])])]),v._v(" "),t("li",[v._v("不使用空格及需要编码的字符\n"),t("ul",[t("li",[v._v("不够一目了然")]),v._v(" "),t("li",[v._v("可能无法访问资源")])])]),v._v(" "),t("li",[v._v("使用连接符来连接多个单词\n"),t("ul",[t("li",[v._v("方法\n"),t("ul",[t("li",[v._v("蛇形法：http:/api.example.com/v1/users/1/profile_image")]),v._v(" "),t("li",[v._v("驼峰法：http:/api.example.com/v1/users/1/profileImage")]),v._v(" "),t("li",[v._v("脊柱法：http:/api.example.com/v1/users/1/profile-image")]),v._v(" "),t("li",[v._v("点分法：http:/api.example.com/v1/users/1/profile.image")])])]),v._v(" "),t("li",[v._v("事实标准\n"),t("ul",[t("li",[v._v("Twitter：/statuses/user_timeline")]),v._v(" "),t("li",[v._v("YouTube：/guideCategories")]),v._v(" "),t("li",[v._v("Facebook：/me/books.quotes")]),v._v(" "),t("li",[v._v("LinkedIn：/v1/people-search")]),v._v(" "),t("li",[v._v("Bit.ly：/v3/user/popular_earned_by_clicks")]),v._v(" "),t("li",[v._v("Disqus：/api/3.0/applications/listUsage.json")])])]),v._v(" "),t("li",[v._v("推荐使用连字符 "),t("code",[v._v("-")]),v._v("；原因是 Google 推荐使用连字符，使用连字符对 SEO 友好；其次 URI 里的主机名（域名）允许使用连字符而禁止使用下划线，且不区分大小写。而且点子符具有特殊含义。")])])])]),v._v(" "),t("p",[v._v("因此，为了使用和主机名一致的规则来统一 URI 命名，用连字符连接多个单词最适合不过。")]),v._v(" "),t("p",[t("strong",[v._v("搜索与查询参数的设计")])]),v._v(" "),t("p",[v._v("获取数据量和获取位置的查询参数。这两个参数就是俗称的「分页」参数。各大公司的示例如下：")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("在线服务名称")]),v._v(" "),t("th",[v._v("获取数据量")]),v._v(" "),t("th",[v._v("获取相对位置")]),v._v(" "),t("th",[v._v("获取绝对位置")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("Twitter")]),v._v(" "),t("td",[v._v("count")]),v._v(" "),t("td",[v._v("cursor")]),v._v(" "),t("td",[v._v("max_id")])]),v._v(" "),t("tr",[t("td",[v._v("YouTube")]),v._v(" "),t("td",[v._v("maxResults")]),v._v(" "),t("td",[v._v("pageToken")]),v._v(" "),t("td",[v._v("publishedBefore / publishedAfter")])]),v._v(" "),t("tr",[t("td",[v._v("Flickr")]),v._v(" "),t("td",[v._v("per_page")]),v._v(" "),t("td",[v._v("page")]),v._v(" "),t("td",[v._v("max_upload_date")])]),v._v(" "),t("tr",[t("td",[v._v("LinkedIn")]),v._v(" "),t("td",[v._v("count")]),v._v(" "),t("td",[v._v("start")]),v._v(" "),t("td")]),v._v(" "),t("tr",[t("td",[v._v("Instagram")]),v._v(" "),t("td",[v._v("-")]),v._v(" "),t("td",[v._v("-")]),v._v(" "),t("td",[v._v("max_id")])]),v._v(" "),t("tr",[t("td",[v._v("Last.fm")]),v._v(" "),t("td",[v._v("limit")]),v._v(" "),t("td",[v._v("page")]),v._v(" "),t("td",[v._v("-")])]),v._v(" "),t("tr",[t("td",[v._v("eBay")]),v._v(" "),t("td",[v._v("paginationInput.entriesPerPage")]),v._v(" "),t("td",[v._v("paginationInput.pageNumber")]),v._v(" "),t("td",[v._v("-")])]),v._v(" "),t("tr",[t("td",[v._v("del.icio.us")]),v._v(" "),t("td",[v._v("count")]),v._v(" "),t("td",[v._v("results")]),v._v(" "),t("td",[v._v("start")])]),v._v(" "),t("tr",[t("td",[v._v("bit.ly")]),v._v(" "),t("td",[v._v("limit")]),v._v(" "),t("td",[v._v("offset")]),v._v(" "),t("td",[v._v("-")])]),v._v(" "),t("tr",[t("td",[v._v("Tumblr")]),v._v(" "),t("td",[v._v("limit")]),v._v(" "),t("td",[v._v("offset  since_id")]),v._v(" "),t("td")]),v._v(" "),t("tr",[t("td",[v._v("Disqus")]),v._v(" "),t("td",[v._v("limit")]),v._v(" "),t("td",[v._v("offset")]),v._v(" "),t("td",[v._v("-")])]),v._v(" "),t("tr",[t("td",[v._v("Github")]),v._v(" "),t("td",[v._v("per_page")]),v._v(" "),t("td",[v._v("page")]),v._v(" "),t("td",[v._v("-")])]),v._v(" "),t("tr",[t("td",[v._v("Pocket")]),v._v(" "),t("td",[v._v("limit")]),v._v(" "),t("td",[v._v("offset")]),v._v(" "),t("td",[v._v("-")])]),v._v(" "),t("tr",[t("td",[v._v("Etsy")]),v._v(" "),t("td",[v._v("limit")]),v._v(" "),t("td",[v._v("offset")]),v._v(" "),t("td",[v._v("-")])])])]),v._v(" "),t("p",[v._v("从中可以看出一般在线服务会用 "),t("code",[v._v("limit")]),v._v(" 、 "),t("code",[v._v("count")]),v._v(" 和 "),t("code",[v._v("per_page")]),v._v(" 来表示获取的数据量，而使用 "),t("code",[v._v("page")]),v._v(" 、 "),t("code",[v._v("offset")]),v._v(" 和 "),t("code",[v._v("cursor")]),v._v(" 来表示获取数据的位置。")]),v._v(" "),t("p",[t("strong",[v._v("使用相对位置存在的问题")])]),v._v(" "),t("ul",[t("li",[v._v("在 MySQL 等 RDB 中，当使用 "),t("code",[v._v("offset")]),v._v(" 或 "),t("code",[v._v("limit")]),v._v(" 来获取指定的数据位置时，随着数据量的增加，响应速度会不断下降。")]),v._v(" "),t("li",[v._v("如果数据更新的频率很高，会导致当前获取的数据出现一定的偏差。")])]),v._v(" "),t("p",[t("strong",[v._v("用于过滤的参数")])]),v._v(" "),t("p",[v._v("在 API 里设置过滤条件，以此来实现搜索用户的功能。各个在线服务实现如下：")]),v._v(" "),t("ul",[t("li",[v._v("LinkedIn：http://api.linkedin.com/v1/people-search?first-name=Clair")]),v._v(" "),t("li",[v._v("Tumblr：http://api.tumblr.com/v2/blog/pitchersandpoets.tumblr.com/posts?tag=new+york+yankees")]),v._v(" "),t("li",[v._v("Instagram：http://api.instagram.com/v1/users/search?q=jack")]),v._v(" "),t("li",[v._v("Foursquare：http://api.foursquare.com/v2/venues/search?q=apple&categoryId=asad132421&ll=44.3,37.2&radius=800")])]),v._v(" "),t("p",[t("strong",[v._v("查询参数和路径的使用区别")])]),v._v(" "),t("p",[v._v("在设计 URI 时，必须决定是把客户端指定的特定参数放在查询参数里还是路径里，决策的依据有以下两点：")]),v._v(" "),t("ul",[t("li",[v._v("是否是表示唯一资源所需的信息")]),v._v(" "),t("li",[v._v("是否可以省略")])]),v._v(" "),t("p",[v._v("首先第一点提到了资源是否唯一，这主要基于「URI 表示资源」这一根本思想。像用户 ID 能够表示资源的唯一性，将用户 ID 放在路径中就比较合适。然后是否可以省略，比如罗列、搜索时用到的 "),t("code",[v._v("offset")]),v._v(" 、 "),t("code",[v._v("limit")]),v._v(" 或 "),t("code",[v._v("page")]),v._v(" 参数，如果忽略，很多情况下都会启用默认值而不会出错，所以放在查询参数里更为合适。")]),v._v(" "),t("h3",{attrs:{id:"主机名和端点的共有部分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#主机名和端点的共有部分"}},[v._v("#")]),v._v(" 主机名和端点的共有部分")]),v._v(" "),t("p",[v._v("完整的端点是类似于 "),t("code",[v._v("https://api.example.com/v1/users")]),v._v(" 这样的 HTTP 的 URI 信息。 "),t("code",[v._v("https://api.example.com/v1/")]),v._v(" 是 API 的共有部分，对这部分内容的设计也有必要进行一番考量。")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("在线服务")]),v._v(" "),t("th",[v._v("端点的共有部分")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("Twitter")]),v._v(" "),t("td",[v._v("api.twitter.com/1.1")])]),v._v(" "),t("tr",[t("td",[v._v("Foursquare")]),v._v(" "),t("td",[v._v("api.foursquare.com/v2")])]),v._v(" "),t("tr",[t("td",[v._v("Tumblr")]),v._v(" "),t("td",[v._v("api.tumblr.com/v2")])]),v._v(" "),t("tr",[t("td",[v._v("Github")]),v._v(" "),t("td",[v._v("api.github.com")])]),v._v(" "),t("tr",[t("td",[v._v("LinkedIn")]),v._v(" "),t("td",[v._v("api.linkedin.com/v1")])])])]),v._v(" "),t("h3",{attrs:{id:"通过版本信息来管理-api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通过版本信息来管理-api"}},[v._v("#")]),v._v(" 通过版本信息来管理 API")]),v._v(" "),t("ul",[t("li",[v._v("在 URI 中嵌入版本编号")]),v._v(" "),t("li",[v._v("在查询字符串里加入版本信息")]),v._v(" "),t("li",[v._v("使用媒体类型来指定版本信息")])]),v._v(" "),t("p",[v._v("为了遵循短小便于输入的原则，推荐使用媒体类型来指定版本信息。")]),v._v(" "),t("h3",{attrs:{id:"登录与-oauth-2-0"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#登录与-oauth-2-0"}},[v._v("#")]),v._v(" 登录与 OAuth 2.0")]),v._v(" "),t("p",[v._v("OAuth 一般用于面向第三方大范围公开的 API 中的认证工作。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://sebastiankennedy-club-1256190695.cos.ap-guangzhou.myqcloud.com/images/oauth.png",alt:"oauth"}})]),v._v(" "),t("p",[v._v("OAuth 2.0 的认证类型（Grant Type）有：")]),v._v(" "),t("ul",[t("li",[v._v("Authorization Code - 授权码模式")]),v._v(" "),t("li",[v._v("Client Credentials - 客户端模式")]),v._v(" "),t("li",[v._v("Implicit - 简化模式")]),v._v(" "),t("li",[v._v("Resource Owner Password Credentials - 密码模式")])]),v._v(" "),t("p",[v._v("根据不同的项目业务需求，可以选择不同的认证类型。")]),v._v(" "),t("p",[v._v("OAuth 的端点示例")]),v._v(" "),t("ul",[t("li",[v._v("RFC 6749: /token")]),v._v(" "),t("li",[v._v("Twitter: /oauth2/token")]),v._v(" "),t("li",[v._v("Dropbox: /oauth2/authorize")]),v._v(" "),t("li",[v._v("Fackbook: /oauth/access_token")]),v._v(" "),t("li",[v._v("google: /o/oauth2/token")]),v._v(" "),t("li",[v._v("github: /login/oauth/access_token")]),v._v(" "),t("li",[v._v("instagram: /oauth/authorize")]),v._v(" "),t("li",[v._v("tumblr: /oauth/access_token")])]),v._v(" "),t("p",[v._v("当正确的信息送达服务器端后，服务器端便会返回如下 JSON 格式的响应信息")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v('{\n\t"access_token": "令牌",\n\t"token_type": "bearer",\n\t"expires_in": 过期时间,\n\t"refresh_token": "刷新令牌凭证"\n}\n')])])]),t("p",[t("code",[v._v("token_type")]),v._v(" 的 "),t("code",[v._v("bearer")]),v._v(" 是 RFC 6750 定义的 OAuth 2.0 所用的 token 类型。根据 RFC 6750 的定义，\n客户端有 3 种方式将 bearer token 信息发送给服务器。")]),v._v(" "),t("p",[v._v("第一种，将 "),t("code",[v._v("token")]),v._v(" 信息添加到请求信息的首部时，客户端要用到 "),t("code",[v._v("Authorization")]),v._v(" 首部，并按如下方式指定 token 的内容")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("GET /v1/users HTTP / 1.1\nHost: api.example.com\nAuthorization: Bearer lkj123hjkasd879asdiuoqwe7a\n")])])]),t("p",[v._v("第二种，将 "),t("code",[v._v("token")]),v._v(" 信息添加到请求体时，则需要将请求消息里的 "),t("code",[v._v("Content-Type")]),v._v(" 设定为 "),t("code",[v._v("application/x-www-form-urlencoded")]),v._v(" ，\n并用 "),t("code",[v._v("access_token")]),v._v(" 来命名消息体里的参数，然后附加上 "),t("code",[v._v("token")]),v._v(" 信息")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("POST /v1/users HTTP / 1.1\nHost: api.example.com\nContent-type: application/x-www-form-urlencoded\naccess_token=lkj123hjkasd879asdiuoqwe7a\n")])])]),t("p",[v._v("第三种，以查询参数的形式添加 token 参数时，可以在名为 access_token 的查询参数后指定 token 信息发送给服务器。")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("GET /v1/users?access_token=lkj123hjkasd879asdiuoqwe7a\nHost: server.example.com\n")])])]),t("h2",{attrs:{id:"web-api-响应数据的设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#web-api-响应数据的设计"}},[v._v("#")]),v._v(" Web API 响应数据的设计")]),v._v(" "),t("h3",{attrs:{id:"web-api-响应数据的格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#web-api-响应数据的格式"}},[v._v("#")]),v._v(" Web API 响应数据的格式")]),v._v(" "),t("p",[v._v("关于这点不用谈论，选择 JSON 作为默认数据格式即可。")]),v._v(" "),t("h3",{attrs:{id:"web-api-响应数据的指定方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#web-api-响应数据的指定方式"}},[v._v("#")]),v._v(" Web API 响应数据的指定方式")]),v._v(" "),t("p",[v._v("如果客户端需要支持其他的响应数据格式，有三种方法可以向服务端传达这一信息")]),v._v(" "),t("ul",[t("li",[v._v("使用查询参数的方法\n"),t("ul",[t("li",[v._v("https://api.example.com/v1/users?format=xml")])])]),v._v(" "),t("li",[v._v("使用扩展名的方法\n"),t("ul",[t("li",[v._v("https://api.example.com/v1/users.json")])])]),v._v(" "),t("li",[v._v("使用在请求首部指定媒体类型的方法\n"),t("ul",[t("li",[v._v("在 "),t("code",[v._v("HTTP Header")]),v._v(" 加入 "),t("code",[v._v("Accept: application/json")])])])])]),v._v(" "),t("p",[t("strong",[v._v("推荐使用在请求首部指定媒体类型的方法")])]),v._v(" "),t("h3",{attrs:{id:"web-api-响应成功的格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#web-api-响应成功的格式"}},[v._v("#")]),v._v(" Web API 响应成功的格式")]),v._v(" "),t("p",[t("strong",[v._v("选择合适的状态码来表示响应成功")])]),v._v(" "),t("ul",[t("li",[v._v("1 字头：消息")]),v._v(" "),t("li",[v._v("2 字头：成功")]),v._v(" "),t("li",[v._v("3 字头：重定向")])]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("状态码")]),v._v(" "),t("th",[v._v("描述")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("200")]),v._v(" "),t("td",[v._v("更新/获取资源成功")])]),v._v(" "),t("tr",[t("td",[v._v("201")]),v._v(" "),t("td",[v._v("创建资源成功")])]),v._v(" "),t("tr",[t("td",[v._v("204")]),v._v(" "),t("td",[v._v("删除资源成功")])])])]),v._v(" "),t("h3",{attrs:{id:"web-api-响应出错的格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#web-api-响应出错的格式"}},[v._v("#")]),v._v(" Web API 响应出错的格式")]),v._v(" "),t("p",[t("strong",[v._v("选择合适的状态码来表示响应出错")])]),v._v(" "),t("ul",[t("li",[v._v("4 字头：客户端原因引起的错误")]),v._v(" "),t("li",[v._v("5 字头：服务端原因引起的错误")])]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("状态码")]),v._v(" "),t("th",[v._v("描述")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("400")]),v._v(" "),t("td",[v._v("业务错误，具体参见下放业务错误代码")])]),v._v(" "),t("tr",[t("td",[v._v("401")]),v._v(" "),t("td",[v._v("认证失败，请返回 认证 检查参数是否有误")])]),v._v(" "),t("tr",[t("td",[v._v("403")]),v._v(" "),t("td",[v._v("无权限调用接口，如：未开通 API 功能")])]),v._v(" "),t("tr",[t("td",[v._v("404")]),v._v(" "),t("td",[v._v("资源不存在")])]),v._v(" "),t("tr",[t("td",[v._v("405")]),v._v(" "),t("td",[v._v("接口请求方式 Method 有误")])]),v._v(" "),t("tr",[t("td",[v._v("422")]),v._v(" "),t("td",[v._v("请求参数校验失败")])]),v._v(" "),t("tr",[t("td",[v._v("429")]),v._v(" "),t("td",[v._v("触达限流限制")])]),v._v(" "),t("tr",[t("td",[v._v("500")]),v._v(" "),t("td",[v._v("服务器应用发生了错误")])]),v._v(" "),t("tr",[t("td",[v._v("502")]),v._v(" "),t("td",[v._v("服务器无法连接")])]),v._v(" "),t("tr",[t("td",[v._v("503")]),v._v(" "),t("td",[v._v("服务器暂不可用")])]),v._v(" "),t("tr",[t("td",[v._v("504")]),v._v(" "),t("td",[v._v("服务器连接超时")])])])]),v._v(" "),t("p",[t("strong",[v._v("向客户端返回详细的出错信息")])]),v._v(" "),t("p",[v._v("返回出错信息的方法有两种：一种是将详细信息放入 HTTP 响应消息首部，另一种则是通过响应消息体返回。")]),v._v(" "),t("p",[v._v("HTTP 响应消息头")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v('X-MYNAME-ERROR-CODE: 2017\nX-MYNAME-ERROR-MESSAGE: Hello world\nX-MYNAME-ERROR-INFO: "..."\n')])])]),t("p",[v._v("HTTP 响应消息体")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v('{\n    "code": 401,\n    "message": "Bad authentication token",\n}\n')])])]),t("p",[t("strong",[v._v("必须使用 HTTP 响应消息体返回")])]),v._v(" "),t("h3",{attrs:{id:"web-api-响应出错注意事项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#web-api-响应出错注意事项"}},[v._v("#")]),v._v(" Web API 响应出错注意事项")]),v._v(" "),t("p",[t("strong",[v._v("发生错误时防止返回")])]),v._v(" "),t("p",[v._v("某些 API 在发生错误时会将 HTML 信息写入信息体，但虽说发生了错误，但客户端依然在访问 API，所以仍然期待服务器返回 JSON 或 XML 等数据格式。")]),v._v(" "),t("p",[t("strong",[v._v("维护与状态码")])]),v._v(" "),t("p",[v._v("当停止 API 来进行维护工作时，不仅仅要使用 503 状态码来告知用户当前服务已经停止，还要使用 "),t("code",[v._v("Retry-After")]),v._v(" 这一 HTTP 首部来告知用户维护结束的时间。")]),v._v(" "),t("h2",{attrs:{id:"禁止使用-http-缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#禁止使用-http-缓存"}},[v._v("#")]),v._v(" 禁止使用 HTTP 缓存")]),v._v(" "),t("p",[v._v("HTTP 缓存机制分为两类，过期模型和验证模型。过期模型是指预先决定响应数据的保存期限，当到达期限后就会再次访问服务器来重新获取所需的数据；而验证模型则会轮询当前保存的缓存数据是否为最新数据，并只在服务器端进行数据更新时，才重新获取新的数据。")]),v._v(" "),t("p",[v._v("在 HTTP 协议中，缓存处于可用的状态时成为 "),t("code",[v._v("fresh")]),v._v(" 状态，而处于不可用的状态时则成为 "),t("code",[v._v("stale")]),v._v(" 状态。过期模型可以通过在服务器的响应消息里包含何时过期的信息来实现。HTTP 1.1 中定义了两种实现方法：一个方法是用 "),t("code",[v._v("Cache-Control")]),v._v(" 响应消息首部，\n另一个方法是用 "),t("code",[v._v("Expires")]),v._v(" 响应消息首部，分别如下所示：")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("Expires: Fri, 01 Jan 2016 00:00:00 GMT\nCache-Control: max-age=3600\n")])])]),t("p",[v._v("当 "),t("code",[v._v("Expires")]),v._v(" 和 "),t("code",[v._v("Cache-Control")]),v._v(" 同时使用时， "),t("code",[v._v("Cache-Control")]),v._v(" 优先。另外 HTTP 时间格式必须遵循 "),t("code",[v._v("RFC 1123")]),v._v(" 的规范，而且只能使用 "),t("code",[v._v("GMT")]),v._v(" 作为时区。")]),v._v(" "),t("p",[v._v("验证模型采用了询问服务器的方式来判断当前所保存的缓存是否有效。和到期之前不会发生网络访问的过期模型不同，验证模型会在检查缓存的过程中会不时地去访问网络。")]),v._v(" "),t("p",[v._v("在执行验证模型时，需要应用程序支持附带条件的请求。要进行附带条件的请求，就必须向服务器传达「客户端当前保存的信息的状态」，为此需要用到最后更新日期或\n实体标签作为指标。")]),v._v(" "),t("p",[v._v("最后更新时间表示当前数据最后一次更新的日期；而实体标签则是表示某个特定资源版本的标识符。最后更新日期和实体标签会被分别填充在\n「Last-Modified」 和 「ETag」 响应信息首部返回给客户端。")]),v._v(" "),t("p",[v._v("HTTP 1.1 还存在「启发式过期」，当服务端没有给出明确的过期时间时，客户端可以决定大约需要将缓存数据保存多久。这时客户端就要根据服务器端的更新频率、\n具体状况等信息，自行决定缓存的过期时间。")]),v._v(" "),t("p",[v._v("不希望实施缓存的情况，可以使用「Cache-Control」首部实现，或者在「Expires」使用过去的日期或不正确的日期也能到达到同样的效果。")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("// 先用验证模型确认返回的资源是否发生了变化，然后根据令牌来确认是否更新缓存\nCache-Control: no-cache\n\n// 直接禁止浏览器以及中间缓存存储任何版本的返回响应。每次请求都要求返回完整的响应\nCache-Control: no-store\n")])])]),t("h2",{attrs:{id:"同源策略和跨域资源共享"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#同源策略和跨域资源共享"}},[v._v("#")]),v._v(" 同源策略和跨域资源共享")]),v._v(" "),t("p",[v._v("通过 ·XHTTPRequest· 对不同的域进行访问将无法获取响应数据，这一原则成为同源策略(Same Origin Policy)。同源策源主要是出于安全方面的考虑，它只允许从相同的源来读取数据，并通过 URI 里的 schema(http，https)，Host(api.example.com)，端口号的组合来判断是否同源。")]),v._v(" "),t("ul",[t("li",[v._v("http://www.example.com")]),v._v(" "),t("li",[v._v("http://api.example.com")]),v._v(" "),t("li",[v._v("https://www.example.com")]),v._v(" "),t("li",[v._v("https://www.example.com:8888")])]),v._v(" "),t("p",[v._v("上述 URI 皆不同源。")]),v._v(" "),t("p",[t("code",[v._v("CORS（Cross-Origin Resource Sharing）")]),v._v(" 跨域资源共享可以解决同源策略带来的问题。实施 CORS 时，客户端需要使用 Origin 请求首部。然后服务端会检查其中的源\n是否能够允许被访问。并使用 Allow-Origin 响应首部来返回允许访问的源。")]),v._v(" "),t("p",[v._v("CORS 在特定场景下会先行查询请求是否能被接收。使用 OPTION 方法发送请求。然后服务端会响应这样的请求，并返回如下三个首部：")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("Access-Control-Allow-Origin: *      // 允许源清单\nAccess-Control-Allow-Methods: *     // 允许请求方法清单\nAccess-Control-Allow-Headers: *     // 允许请求头部清单\n")])])]),t("p",[v._v("Access-Control-Allow-Max-Age: 允许事先请求的信息在缓存中保存的时间定义私有的 HTTP 首部，如果将 HTTP 首部作为存放元信息的场所，当需要发送无法找到合适首部的元数据时，可以自定义私有的 HTTP 首部，如下所示：")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("X-AppName-PixelRatio: 2.0\n")])])]),t("h2",{attrs:{id:"web-api-安全的设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#web-api-安全的设计"}},[v._v("#")]),v._v(" Web API 安全的设计")]),v._v(" "),t("p",[v._v("由于 HTTP 协议数据传输采用明文的特点，导致整个传输过程完全透明，任何人都能够在链路中截获、修改或者伪造请求/响应报文。针对 HTTP 明文的特点，常见的攻击手段如下：")]),v._v(" "),t("h3",{attrs:{id:"数据嗅探-packet-sniffing"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据嗅探-packet-sniffing"}},[v._v("#")]),v._v(" 数据嗅探（Packet Sniffing）")]),v._v(" "),t("p",[v._v("当前越来越多的公共场所开始提供 WiFi 服务，例如星巴克、图书馆、餐厅，然而在这些地方，攻击者却能非常方便地窃取连接同一 WiFi 的用户的通信数据。这一攻击行为叫做数据嗅探。只需将自己的电子设备接入当前 WiFi，并打开数据嗅探工具（WireShark 之类），就能窃取他人的 HTTP 通信数据。如果在公共场所输入私密数据，例如某些网站的账号和密码，无疑将这些信息暴露在攻击者面前。")]),v._v(" "),t("blockquote",[t("p",[v._v("解决方案：使用 HTTPS 对 HTTP 通信实施加密。HTTPS 能对 URI 路径、查询字符串、协议部分等几乎所有的数据完成加密，防止监听窃取。")])]),v._v(" "),t("h3",{attrs:{id:"会话劫持-session-jacking"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#会话劫持-session-jacking"}},[v._v("#")]),v._v(" 会话劫持（Session Jacking）")]),v._v(" "),t("p",[v._v("会话劫持是可以基于数据嗅探的基础上进行的，攻击者既然能够截获 HTTP 请求，自然能够拿到对应 HTTP 请求的 Cookie 或 Token，通过伪造 HTTP 请求数据和携带对应 Cookie 或 Token，就能冒充用户去访问对应的接口。")]),v._v(" "),t("blockquote",[t("p",[v._v("解决方案：使用 HTTPS 对 HTTP 通信实施加密。HTTPS 能对 URI 路径、查询字符串、协议部分等几乎所有的数据完成加密，防止监听窃取。")])]),v._v(" "),t("h3",{attrs:{id:"中间人攻击-mitm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#中间人攻击-mitm"}},[v._v("#")]),v._v(" 中间人攻击（MITM）")]),v._v(" "),t("p",[v._v("中间人（MITM）攻击是一种攻击类型，其中攻击者将它自己放到两方之间，通常是客户端和服务端通信线路的中间。这可以通过破坏原始频道之后拦截一方的消息并将它们转发（有时会有改变）给另一方来实现。由于 HTTP 不加密、不认证的特点，针对 Web API 的中间人攻击还是比较容易实施的。")]),v._v(" "),t("blockquote",[t("p",[v._v("解决方案：使用 HTTPS 对 HTTP 通信实施加密的同时，需要客户端需要做好 SSL 证书的验证工作，避免信任了伪造的证书，导致中间人可以解密 HTTPS 的通信数据。")])]),v._v(" "),t("h3",{attrs:{id:"跨站脚本攻击-xss"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#跨站脚本攻击-xss"}},[v._v("#")]),v._v(" 跨站脚本攻击（XSS）")]),v._v(" "),t("p",[v._v("XSS 接收用户的输入内容并将其嵌入页面的 HTML 代码，当页面在浏览器里显示时，会自动执行用户输入的 JavaScript 等脚本。一旦页面执行了用户输入的 JavaScript 脚本，攻击者就能访问会话，Cookie 等浏览器里保存的信息，或者篡改页面，甚至还可以不受同源策略的限制进行跨域访问，从而完成任意操作。")]),v._v(" "),t("p",[t("strong",[v._v("解决方案")])]),v._v(" "),t("ul",[t("li",[v._v("响应头加上 "),t("code",[v._v("Content-Type: application/json")]),v._v("，避免浏览器将响应数据当做 "),t("code",[v._v("text/html")]),v._v(" 来解释渲染。")]),v._v(" "),t("li",[v._v("响应头加上 "),t("code",[v._v("X-Content-Type-Options: nosniff")]),v._v("，避免旧版本 IE 浏览器无视 "),t("code",[v._v("Content-Type: application/json")]),v._v(" 的声明而将 JSON 当作 HTML 解释渲染。")]),v._v(" "),t("li",[v._v("响应头加上 "),t("code",[v._v("X-XSS-Protection: 1; mode=block")]),v._v("，打开浏览器自带的检测、防御 XSS 的功能，能够防范大部分 XSS 的攻击模式。")]),v._v(" "),t("li",[v._v("对相应的 JSON 数据进行转义")])]),v._v(" "),t("h3",{attrs:{id:"跨站请求伪造-xsrf"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#跨站请求伪造-xsrf"}},[v._v("#")]),v._v(" 跨站请求伪造（XSRF）")]),v._v(" "),t("p",[v._v("跨站请求攻击，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并运行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去运行。这利用了 Web 中用户身份验证的一个漏洞：简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的。")]),v._v(" "),t("blockquote",[t("p",[v._v("解决方案：使用一次性令牌，需要服务端预先准备好令牌的下发机制。一般利用 "),t("code",[v._v("X-XSS-Token")]),v._v(" 请求头或 Cookie 携带相关信息去访问接口。")])]),v._v(" "),t("h3",{attrs:{id:"拒绝服务攻击-dos"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拒绝服务攻击-dos"}},[v._v("#")]),v._v(" 拒绝服务攻击（Dos）")]),v._v(" "),t("p",[v._v("拒绝服务攻击即攻击者想办法让目标机器停止提供服务或资源访问。这些资源包括磁盘空间、内存、进程甚至网络带宽，从而阻止正常用户的访问。其实对网络带宽进行的消耗性攻击只是拒绝服务攻击的一小部分，只要能够对目标造成麻烦，使某些服务被暂停甚至主机死机，都属于拒绝服务攻击。拒绝服务攻击问题也一直得不到合理的解决，究其原因是因为这是由于网络协议本身的安全缺陷造成的，从而拒绝服务攻击也成为了攻击者的终极手法。")]),v._v(" "),t("h4",{attrs:{id:"限制每个用户的访问"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#限制每个用户的访问"}},[v._v("#")]),v._v(" 限制每个用户的访问")]),v._v(" "),t("ul",[t("li",[v._v("用什么样的机制来识别用户")]),v._v(" "),t("li",[v._v("如何确定限速的数值")]),v._v(" "),t("li",[v._v("以什么单位来设置限速的数值")]),v._v(" "),t("li",[v._v("在什么时候重置限速的数值")]),v._v(" "),t("li",[v._v("应对超出上限值的情况")])]),v._v(" "),t("h4",{attrs:{id:"向用户告知限速的信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#向用户告知限速的信息"}},[v._v("#")]),v._v(" 向用户告知限速的信息")]),v._v(" "),t("ul",[t("li",[v._v("X-RateLimit-Limit: 单位时间的访问上限")]),v._v(" "),t("li",[v._v("X-RateLimit-Reset: 访问次数重置的时间")]),v._v(" "),t("li",[v._v("X-RateLimit-Remaining: 剩余的访问次数")])]),v._v(" "),t("h3",{attrs:{id:"其他安全相关的-http-首部"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他安全相关的-http-首部"}},[v._v("#")]),v._v(" 其他安全相关的 HTTP 首部")]),v._v(" "),t("h4",{attrs:{id:"x-frame-options"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#x-frame-options"}},[v._v("#")]),v._v(" X-Frame-Options")]),v._v(" "),t("p",[v._v("通过设置该首部，就可以控制某个指定的页面是否允许在 FRAME、IFRAME 里读取数据。因为存在点击劫持（Click Jacking）的攻击，即攻击者将透明的 IFRAME 元素悄悄加载到其他页面，让用户进行点击操作。虽然 Web API 一般不会有 FRAME 元素的存在，但是加上也不会有什么坏处")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("X-Frame-Options: deny\n")])])]),t("h4",{attrs:{id:"content-security-policy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#content-security-policy"}},[v._v("#")]),v._v(" Content-Security-Policy")]),v._v(" "),t("p",[v._v("该首部用于 IMG 元素、SCRIPT 元素、LINK 元素等指向的目标资源的范围，一般来说 Web API 不需要读取其他静态资源，所以可以通过这个首部告诉浏览器不去读取静态资源。")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("Content-Security-Policy: default-src 'none'\n")])])]),t("h4",{attrs:{id:"strict-transport-security"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#strict-transport-security"}},[v._v("#")]),v._v(" Strict-Transport-Security")]),v._v(" "),t("p",[v._v("该首部用于实现 HSTS 功能，能够限制浏览器只使用 HTTPS 方式来访问某个 Web 服务。")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("Strict-Transport-Security: max-age=15768000\n")])])]),t("h4",{attrs:{id:"public-key-pins"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#public-key-pins"}},[v._v("#")]),v._v(" Public-Key-Pins")]),v._v(" "),t("p",[v._v("该首部用于实现 HPKP 功能，用于检查站点的 SSL 证书是否是伪造的。服务端会在该首部内写入证书内容的散列值和有效期，当浏览器访问时，就会通过该散列值来验证网站持有的证书是否合法。")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("Public-Key-Pins: max-age=XXX; pin-sha256=XXXX; pin-sha256=XXX;\n")])])]),t("h4",{attrs:{id:"set-cookie"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#set-cookie"}},[v._v("#")]),v._v(" Set-Cookie")]),v._v(" "),t("p",[v._v("在 "),t("code",[v._v("Set-Cookie")]),v._v(" 首部设置名为 Secure 和 HttpOnly 的属性，可以大大加强安全性。Secure 表示只有在 HTTPS 通信时才能被发送给服务端。HttpOnly 表示 Cookie 信息仅用于 HTTP 通信，浏览器不能使用 JavaScript 脚本来访问。")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("Set-Cookie: session=XXXX; Path=/; Secure; HttpOnly\n")])])]),t("h2",{attrs:{id:"web-api-开发确认清单"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#web-api-开发确认清单"}},[v._v("#")]),v._v(" Web API 开发确认清单")]),v._v(" "),t("p",[v._v("Web API 检查清单，基于【Web API的设计与开发】书籍内容进行丰富，并给予了必要的解释与说明，方便大家快速浏览与统一协作。")]),v._v(" "),t("h3",{attrs:{id:"确认清单"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#确认清单"}},[v._v("#")]),v._v(" 确认清单")]),v._v(" "),t("ul",[t("li",[v._v("[ ] 短小便于输入的 URI\n"),t("ul",[t("li",[v._v("http://api.example.com/service/api/search")]),v._v(" "),t("li",[v._v("http://api.example.com/serach √")])])]),v._v(" "),t("li",[v._v("[ ] 人可以秒懂的 URI\n"),t("ul",[t("li",[v._v("http://api.example.com/sv/u/")]),v._v(" "),t("li",[v._v("http://api.example.com/seihin/1")]),v._v(" "),t("li",[v._v("http://api.example.com/productos/1")]),v._v(" "),t("li",[v._v("http://api.example.com/products/1 √")])])]),v._v(" "),t("li",[v._v("[ ] 没有大小写混用的 URI\n"),t("ul",[t("li",[v._v("http://api.example.com/Users/1")]),v._v(" "),t("li",[v._v("http://api.example.com/API/getUserName")]),v._v(" "),t("li",[v._v("http://api.example.com/USERS/1")]),v._v(" "),t("li",[v._v("http://api.example.com/users/1 √")])])]),v._v(" "),t("li",[v._v("[ ] 修改方便的 URI\n"),t("ul",[t("li",[v._v("http://api.example.com/v1/items/alpha/1")]),v._v(" "),t("li",[v._v("http://api.example.com/v1/items/1 √")])])]),v._v(" "),t("li",[v._v("[ ] 不会暴露服务器架构的 URI\n"),t("ul",[t("li",[v._v("http://api.example.com/cgi-bin/get_user.php?user=100")]),v._v(" "),t("li",[v._v("http://api.example.com/v1/users/100 √")])])]),v._v(" "),t("li",[v._v("[ ] 规则统一的 URI\n"),t("ul",[t("li",[v._v("不统一的 URI\n"),t("ul",[t("li",[v._v("获取好友信息：GET http://api.example.com/friends?id=100")]),v._v(" "),t("li",[v._v("发送站内消息：POST http://api.example.com/friend/100/message")])])]),v._v(" "),t("li",[v._v("统一的 URI\n"),t("ul",[t("li",[v._v("获取好友信息：GET http://api.example.com/friends/100 √")]),v._v(" "),t("li",[v._v("发送站内消息：POST http://api.example.com/friends/100/messages √")])])])])]),v._v(" "),t("li",[v._v("[ ] URI 单词要求符合正确的语义性，例如：\n"),t("ul",[t("li",[v._v("照片应该是 photo 而不是 picture")])])]),v._v(" "),t("li",[v._v("[ ] URI 里用到的名词是否采用了复数形式\n"),t("ul",[t("li",[v._v("因为URI表示资源的集合，所以作者是建议总是使用复数形式。")])])]),v._v(" "),t("li",[v._v("[ ] URI 不能存在空格符和需要编码的字符\n"),t("ul",[t("li",[v._v("URL是会被urlencode编码的，所以不要在URI里使用空格（会被编码成+）、UTF-8字符、乱七八糟的符号等。")]),v._v(" "),t("li",[v._v("不能影响可读性")])])]),v._v(" "),t("li",[v._v("[ ] URI 单词和单词之间必须使用 - 连字符链接多个单词，例如：\n"),t("ul",[t("li",[v._v("productSku、ProductSpu、vip_user")]),v._v(" "),t("li",[v._v("product-sku、product-spu、vip-user √")])])]),v._v(" "),t("li",[v._v("[ ] 必须使用 HTTPS 协议")]),v._v(" "),t("li",[v._v("[ ] 建议使用合适的 HTTP 方法")]),v._v(" "),t("li",[v._v("[ ] 无需缓存的数据，需要添加 Cache-Control: no-cache 首部信息")]),v._v(" "),t("li",[v._v("[ ] 需要缓存的数据，合理使用 Cache-Control、ETag、Last-Modified、Vary 等缓存策略")]),v._v(" "),t("li",[v._v("[ ] 合理配置 CORS")]),v._v(" "),t("li",[v._v("[ ] 响应数据格式采用 JSON 作为默认格式")]),v._v(" "),t("li",[v._v("[ ] 响应数据认真执行 JSON 转义")]),v._v(" "),t("li",[v._v("[ ] 响应数据出错时，不能返回 HTML 数据（生产环境）")]),v._v(" "),t("li",[v._v("[ ] 响应数据里面需要添加各种安全性的首部，例如：\n"),t("ul",[t("li",[v._v("Secure：表示 Cookie 只能在访问 https 链接时才能被发送给服务端，这样可以彻底避免 Cookie 被攻击者在网络中嗅探到。")]),v._v(" "),t("li",[v._v("HttpOnly：Cookie 仅能供 HTTP 调用时使用，而不允许 JavaScript 直接获取 Cookie，这样可以避免网站出现 XSS 漏洞的时候，攻击者通过 JS 代码把用户的会话 Cookie 盗走。")])])]),v._v(" "),t("li",[v._v("[ ] 通过版本信息来管理 API（三选一）\n"),t("ul",[t("li",[v._v("在 URI 中嵌入版本编号")]),v._v(" "),t("li",[v._v("在查询字符串里加入版本信息")]),v._v(" "),t("li",[v._v("使用媒体类型来指定版本信息（推荐）")])])]),v._v(" "),t("li",[v._v("[ ] API 版本命名方式需要遵循语义化版本控制规范\n"),t("ol",[t("li",[v._v("如果软件API没有变更，只是修复服务端BUG，那么就增加补丁版本号")]),v._v(" "),t("li",[v._v("对软件API实施了向下兼容的变更，增加次版本号")]),v._v(" "),t("li",[v._v("对软件API实施了不向下兼容的变更时，增加主版本号")])])]),v._v(" "),t("li",[v._v("[ ] API 在接收参数时需要仔细检查非法参数\n"),t("ul",[t("li",[v._v("前端后端同时校验")])])]),v._v(" "),t("li",[v._v("[ ] API 更新数据操作必须做到幂等性\n"),t("ul",[t("li",[v._v("举例，支付请求重复发送时，不会要求用户支付多次，退款请求重复发送时，不会重复退款。")])])]),v._v(" "),t("li",[v._v("[ ] API 需要根据业务实现访问限速\n"),t("ul",[t("li",[v._v("获取验证码请求和产品列表请求，最高每分钟请求频率肯定不一致。")])])])]),v._v(" "),t("h3",{attrs:{id:"待商榷的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#待商榷的"}},[v._v("#")]),v._v(" 待商榷的")]),v._v(" "),t("ul",[t("li",[v._v("是否使用 RESTFul 风格\n"),t("ul",[t("li",[v._v("增加了心智负担，需要一定的接口设计能力")]),v._v(" "),t("li",[v._v("采用传统风格（控制器 + 方法名）的方式可能不用耗时在 URL 命名上，例如：获取用户列表、获取单一用户、当前用户\n"),t("ul",[t("li",[v._v("RESTful\n"),t("ul",[t("li",[v._v("GET http://api.example.com/users?page=1")]),v._v(" "),t("li",[v._v("GET http://api.example.com/users/1")]),v._v(" "),t("li",[v._v("GET http://api.example.com/users/me")])])]),v._v(" "),t("li",[v._v("传统风格\n"),t("ul",[t("li",[v._v("GET http://api.example.com/user/get-user-list?page=1")]),v._v(" "),t("li",[v._v("GET http://api.example.com/user/get-user?id=1")]),v._v(" "),t("li",[v._v("GET http://api.example.com/user/get-current-user")])])])])])])]),v._v(" "),t("li",[v._v("是否使用复数形式来表现 URI\n"),t("ul",[t("li",[v._v("使用 RESTFul 必然就是使用复兴形式表现 URI")]),v._v(" "),t("li",[v._v("由于控制器、模型的命名通常都是单数形式，使用传统风格用单数在风格上会更加统一")])])])])])}),[],!1,null,null,null);_.default=a.exports}}]);